name: Rust SDK CI

on:
  push:
    branches: [main]
    paths-ignore:
      - "*.md"
      - "project-docs/**"
      - "hessra-py/README.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "*.md"
      - "project-docs/**"
      - "hessra-py/README.md"
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  # Choose a specific PostgreSQL version for pgrx
  PGRX_PG_VERSION: pg15

jobs:
  badge:
    name: Generate Status Badge
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.BADGE_GIST_ID || github.run_id }}
          filename: hessra-sdk-rs-ci-status.json
          label: CI
          message: passing
          color: green
        if: success()

      - name: Generate Badge (failure)
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.BADGE_GIST_ID || github.run_id }}
          filename: hessra-sdk-rs-ci-status.json
          label: CI
          message: failing
          color: red
        if: failure()

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install pgrx dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libreadline-dev zlib1g-dev flex bison libxml2-dev libxslt-dev libssl-dev libxml2-utils xsltproc ccache

      - name: Install cargo-pgrx
        run: cargo install cargo-pgrx --version 0.14.3 --locked

      - name: Initialize PGRX
        run: |
          cargo pgrx init --${{ env.PGRX_PG_VERSION }} download

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy for non-PGRX crates
        run: RUSTFLAGS='--cfg reqwest_unstable' cargo clippy --workspace --exclude hessra_authz --exclude hessra-py -- -D warnings

      - name: Run clippy for hessra-py crate
        working-directory: hessra-py
        run: cargo clippy -- -D warnings

      - name: Run clippy for PGRX crate
        working-directory: hessra-pgrx/hessra_authz
        run: RUSTFLAGS='--cfg reqwest_unstable' cargo clippy --no-default-features --features ${{ env.PGRX_PG_VERSION }} -- -D warnings

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  test:
    name: Test on ${{ matrix.os }} / ${{ matrix.rust }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests for non-PGRX crates
        run: |
          cargo test --workspace --exclude hessra_authz --exclude hessra-py

      - name: Run tests for individual crates
        run: |
          cargo test -p hessra-token
          cargo test -p hessra-config
          cargo test -p hessra-api
          cargo test -p hessra-sdk

      - name: Run tests for hessra-py crate
        working-directory: hessra-py
        run: cargo test

  pgrx-test:
    name: Test PGRX crates
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-pgrx-${{ hashFiles('**/Cargo.lock') }}

      - name: Install pgrx dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libreadline-dev zlib1g-dev flex bison libxml2-dev libxslt-dev libssl-dev libxml2-utils xsltproc ccache

      - name: Install cargo-pgrx
        run: cargo install cargo-pgrx --version 0.14.3 --locked

      - name: Initialize PGRX
        run: |
          cargo pgrx init --${{ env.PGRX_PG_VERSION }} download

      - name: Test PGRX crates
        working-directory: hessra-pgrx/hessra_authz
        run: cargo pgrx test ${{ env.PGRX_PG_VERSION }} --no-default-features --features ${{ env.PGRX_PG_VERSION }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --workspace --exclude hessra_authz --exclude hessra-py --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: false

  python-lint:
    name: Python Lint (hessra-py)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        working-directory: hessra-py
        run: uv sync --dev

      - name: Run ruff check
        working-directory: hessra-py
        run: uv run ruff check examples/

      - name: Run ruff format check
        working-directory: hessra-py
        run: uv run ruff format --check examples/

      - name: Run black check
        working-directory: hessra-py
        run: uv run black --check --diff examples/

  integration-tests:
    name: Run integration examples
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run http1_example.rs
        run: cargo run --example http1 --manifest-path hessra-sdk/Cargo.toml

      - name: Run service_chain.rs
        run: cargo run --example service_chain --manifest-path hessra-sdk/Cargo.toml

      - name: Run identity_token.rs
        run: cargo run --example identity_token --manifest-path hessra-sdk/Cargo.toml

  python-integration-tests:
    name: Python Integration Tests (hessra-py)
    runs-on: ubuntu-latest
    needs: [test, lint, python-lint]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-python-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies and build Python module
        working-directory: hessra-py
        run: |
          uv sync --dev
          uv run maturin develop

      - name: Run comprehensive example
        working-directory: hessra-py
        run: uv run python examples/comprehensive_example.py

      - name: Run verification-only example
        working-directory: hessra-py
        run: uv run python examples/verification_only_example.py

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install pgrx dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libreadline-dev zlib1g-dev flex bison libxml2-dev libxslt-dev libssl-dev libxml2-utils xsltproc ccache

      - name: Install cargo-pgrx
        run: cargo install cargo-pgrx --version 0.14.3 --locked

      - name: Initialize PGRX
        run: |
          cargo pgrx init --${{ env.PGRX_PG_VERSION }} download

      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v5

      - name: Build non-PGRX docs
        run: cargo doc --no-deps --workspace --exclude hessra_authz --exclude hessra-py

      - name: Build PGRX docs
        working-directory: hessra-pgrx/hessra_authz
        run: cargo doc --no-deps --no-default-features --features ${{ env.PGRX_PG_VERSION }}

      - name: Create index page that redirects to hessra_sdk
        if: github.ref == 'refs/heads/main'
        run: echo '<meta http-equiv="refresh" content="0; url=hessra_sdk/index.html">' > target/doc/index.html

      - name: Upload documentation
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/doc

  # GitHub Pages deployment job
  deploy-docs:
    name: Deploy Documentation
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: docs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
